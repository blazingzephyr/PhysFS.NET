

// <auto-generated/>


public static unsafe partial class physfs
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
    [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
    public static partial void PHYSFS_init()
    {
        nint __retVal_native;
        {
            __retVal_native = __PInvoke();
        }

        if (__retVal_native == 0)
        {
            throw new Exception();
        }

        // Local P/Invoke
        [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_init", ExactSpelling = true)]
        [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
        static extern unsafe nint __PInvoke();
    }
}

namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial void PHYSFS_getLinkedVersion(out global::Icculus.PhysFS.NET.Internals.PHYSFS_Version ver)
        {
            global::System.Runtime.CompilerServices.Unsafe.SkipInit(out ver);
            // Pin - Pin data in preparation for calling the P/Invoke.
            fixed (global::Icculus.PhysFS.NET.Internals.PHYSFS_Version* __ver_native = &ver)
            {
                __PInvoke(__ver_native);
            }

            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_getLinkedVersion", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe void __PInvoke(global::Icculus.PhysFS.NET.Internals.PHYSFS_Version* __ver_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_deinit()
        {
            bool __retVal;
            nint __retVal_native;
            {
                __retVal_native = __PInvoke();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = global::System.Runtime.InteropServices.Marshalling.VoidMarshaller.ConvertToManaged(__retVal_native);
            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_deinit", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe nint __PInvoke();
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_supportedArchiveTypes", ExactSpelling = true)]
        public static extern partial nint PHYSFS_supportedArchiveTypes();
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_freeList", ExactSpelling = true)]
        public static extern partial void PHYSFS_freeList(nint listVar);
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial string PHYSFS_getDirSeparator()
        {
            bool __invokeSucceeded = default;
            string __retVal = default;
            byte* __retVal_native = default;
            try
            {
                {
                    __retVal_native = __PInvoke();
                }

                __invokeSucceeded = true;
                // Unmarshal - Convert native data to managed data.
                __retVal = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshallerSkipFree.ConvertToManaged(__retVal_native);
            }
            finally
            {
                if (__invokeSucceeded)
                {
                    // CleanupCalleeAllocated - Perform cleanup of callee allocated resources.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshallerSkipFree.Free(__retVal_native);
                }
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_getDirSeparator", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvCdecl) })]
            static extern unsafe byte* __PInvoke();
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        internal static partial void PHYSFS_permitSymbolicLinks(bool allow)
        {
            sbyte __allow_native;
            // Marshal - Convert managed data to native data.
            __allow_native = (sbyte)(allow ? 1 : 0);
            {
                __PInvoke(__allow_native);
            }

            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_permitSymbolicLinks", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe void __PInvoke(sbyte __allow_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_getCdRomDirs", ExactSpelling = true)]
        internal static extern partial nint PHYSFS_getCdRomDirs();
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial string PHYSFS_getBaseDir()
        {
            bool __invokeSucceeded = default;
            string __retVal = default;
            byte* __retVal_native = default;
            try
            {
                {
                    __retVal_native = __PInvoke();
                }

                __invokeSucceeded = true;
                // Unmarshal - Convert native data to managed data.
                __retVal = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshallerSkipFree.ConvertToManaged(__retVal_native);
            }
            finally
            {
                if (__invokeSucceeded)
                {
                    // CleanupCalleeAllocated - Perform cleanup of callee allocated resources.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshallerSkipFree.Free(__retVal_native);
                }
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_getBaseDir", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe byte* __PInvoke();
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial string PHYSFS_getWriteDir()
        {
            bool __invokeSucceeded = default;
            string __retVal = default;
            byte* __retVal_native = default;
            try
            {
                {
                    __retVal_native = __PInvoke();
                }

                __invokeSucceeded = true;
                // Unmarshal - Convert native data to managed data.
                __retVal = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshallerSkipFree.ConvertToManaged(__retVal_native);
            }
            finally
            {
                if (__invokeSucceeded)
                {
                    // CleanupCalleeAllocated - Perform cleanup of callee allocated resources.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshallerSkipFree.Free(__retVal_native);
                }
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_getWriteDir", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe byte* __PInvoke();
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_setWriteDir(string newDir)
        {
            byte* __newDir_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __newDir_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __newDir_native__marshaller.FromManaged(newDir, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __newDir_native = __newDir_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__newDir_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __newDir_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_setWriteDir", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(byte* __newDir_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_getSearchPath", ExactSpelling = true)]
        public static extern partial nint PHYSFS_getSearchPath();
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_setSaneConfig(string organization, string appName, string archiveExt, bool includeCdRoms, bool archivesFirst)
        {
            byte* __organization_native = default;
            byte* __appName_native = default;
            byte* __archiveExt_native = default;
            sbyte __includeCdRoms_native = default;
            sbyte __archivesFirst_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __archiveExt_native__marshaller = new();
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __appName_native__marshaller = new();
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __organization_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __archivesFirst_native = (sbyte)(archivesFirst ? 1 : 0);
                __includeCdRoms_native = (sbyte)(includeCdRoms ? 1 : 0);
                __archiveExt_native__marshaller.FromManaged(archiveExt, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                __appName_native__marshaller.FromManaged(appName, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                __organization_native__marshaller.FromManaged(organization, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __archiveExt_native = __archiveExt_native__marshaller.ToUnmanaged();
                    __appName_native = __appName_native__marshaller.ToUnmanaged();
                    __organization_native = __organization_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__organization_native, __appName_native, __archiveExt_native, __includeCdRoms_native, __archivesFirst_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __archiveExt_native__marshaller.Free();
                __appName_native__marshaller.Free();
                __organization_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_setSaneConfig", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(byte* __organization_native, byte* __appName_native, byte* __archiveExt_native, sbyte __includeCdRoms_native, sbyte __archivesFirst_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_mkdir(string dirName)
        {
            byte* __dirName_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __dirName_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __dirName_native__marshaller.FromManaged(dirName, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __dirName_native = __dirName_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__dirName_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __dirName_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_mkdir", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(byte* __dirName_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_delete(string filename)
        {
            byte* __filename_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __filename_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __filename_native__marshaller.FromManaged(filename, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __filename_native = __filename_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__filename_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __filename_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_delete", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(byte* __filename_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial string PHYSFS_getRealDir(string filename)
        {
            bool __invokeSucceeded = default;
            byte* __filename_native = default;
            string __retVal = default;
            byte* __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __filename_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __filename_native__marshaller.FromManaged(filename, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __filename_native = __filename_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__filename_native);
                }

                __invokeSucceeded = true;
                // Unmarshal - Convert native data to managed data.
                __retVal = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshallerSkipFree.ConvertToManaged(__retVal_native);
            }
            finally
            {
                if (__invokeSucceeded)
                {
                    // CleanupCalleeAllocated - Perform cleanup of callee allocated resources.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshallerSkipFree.Free(__retVal_native);
                }

                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __filename_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_getRealDir", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe byte* __PInvoke(byte* __filename_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial nint PHYSFS_enumerateFiles(string dir)
        {
            byte* __dir_native = default;
            nint __retVal = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __dir_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __dir_native__marshaller.FromManaged(dir, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __dir_native = __dir_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__dir_native);
                }
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __dir_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_enumerateFiles", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe nint __PInvoke(byte* __dir_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_exists(string fname)
        {
            byte* __fname_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __fname_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __fname_native__marshaller.FromManaged(fname, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __fname_native = __fname_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__fname_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __fname_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_exists", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(byte* __fname_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial global::Icculus.PhysFS.NET.Internals.FileHandle PHYSFS_openWrite(string filename)
        {
            bool __invokeSucceeded = default;
            byte* __filename_native = default;
            global::Icculus.PhysFS.NET.Internals.FileHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Icculus.PhysFS.NET.Internals.FileHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __filename_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __filename_native__marshaller.FromManaged(filename, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __filename_native = __filename_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__filename_native);
                }

                __invokeSucceeded = true;
                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                if (__invokeSucceeded)
                {
                    // CleanupCalleeAllocated - Perform cleanup of callee allocated resources.
                    __retVal_native__marshaller.Free();
                }

                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __filename_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_openWrite", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe nint __PInvoke(byte* __filename_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial global::Icculus.PhysFS.NET.Internals.FileHandle PHYSFS_openAppend(string filename)
        {
            bool __invokeSucceeded = default;
            byte* __filename_native = default;
            global::Icculus.PhysFS.NET.Internals.FileHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Icculus.PhysFS.NET.Internals.FileHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __filename_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __filename_native__marshaller.FromManaged(filename, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __filename_native = __filename_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__filename_native);
                }

                __invokeSucceeded = true;
                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                if (__invokeSucceeded)
                {
                    // CleanupCalleeAllocated - Perform cleanup of callee allocated resources.
                    __retVal_native__marshaller.Free();
                }

                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __filename_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_openAppend", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe nint __PInvoke(byte* __filename_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial global::Icculus.PhysFS.NET.Internals.FileHandle PHYSFS_openRead(string filename)
        {
            bool __invokeSucceeded = default;
            byte* __filename_native = default;
            global::Icculus.PhysFS.NET.Internals.FileHandle __retVal = default;
            nint __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Icculus.PhysFS.NET.Internals.FileHandle>.ManagedToUnmanagedOut __retVal_native__marshaller = new();
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __filename_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __filename_native__marshaller.FromManaged(filename, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __filename_native = __filename_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__filename_native);
                }

                __invokeSucceeded = true;
                // UnmarshalCapture - Capture the native data into marshaller instances in case conversion to managed data throws an exception.
                __retVal_native__marshaller.FromUnmanaged(__retVal_native);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native__marshaller.ToManaged();
            }
            finally
            {
                if (__invokeSucceeded)
                {
                    // CleanupCalleeAllocated - Perform cleanup of callee allocated resources.
                    __retVal_native__marshaller.Free();
                }

                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __filename_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_openRead", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe nint __PInvoke(byte* __filename_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_close(global::Icculus.PhysFS.NET.Internals.FileHandle _handle)
        {
            nint ___handle_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Icculus.PhysFS.NET.Internals.FileHandle>.ManagedToUnmanagedIn ___handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                ___handle_native__marshaller.FromManaged(_handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    ___handle_native = ___handle_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(___handle_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                ___handle_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_close", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(nint ___handle_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_eof(global::Icculus.PhysFS.NET.Internals.FileHandle handle)
        {
            nint __handle_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Icculus.PhysFS.NET.Internals.FileHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__handle_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __handle_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_eof", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(nint __handle_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial long PHYSFS_tell(global::Icculus.PhysFS.NET.Internals.FileHandle handle)
        {
            nint __handle_native = default;
            long __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Icculus.PhysFS.NET.Internals.FileHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__handle_native);
                }
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __handle_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_tell", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe long __PInvoke(nint __handle_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_seek(global::Icculus.PhysFS.NET.Internals.FileHandle handle, ulong pos)
        {
            nint __handle_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Icculus.PhysFS.NET.Internals.FileHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__handle_native, pos);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __handle_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_seek", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(nint __handle_native, ulong __pos_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial ulong PHYSFS_fileLength(global::Icculus.PhysFS.NET.Internals.FileHandle handle)
        {
            nint __handle_native = default;
            ulong __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Icculus.PhysFS.NET.Internals.FileHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__handle_native);
                }
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __handle_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_fileLength", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe ulong __PInvoke(nint __handle_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_setBuffer(global::Icculus.PhysFS.NET.Internals.FileHandle handle, ulong bufsize)
        {
            nint __handle_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Icculus.PhysFS.NET.Internals.FileHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__handle_native, bufsize);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __handle_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_setBuffer", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(nint __handle_native, ulong __bufsize_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_flush(global::Icculus.PhysFS.NET.Internals.FileHandle handle)
        {
            nint __handle_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Icculus.PhysFS.NET.Internals.FileHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__handle_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __handle_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_flush", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(nint __handle_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_isInit()
        {
            bool __retVal;
            sbyte __retVal_native;
            {
                __retVal_native = __PInvoke();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_isInit", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke();
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_symbolicLinksPermitted()
        {
            bool __retVal;
            sbyte __retVal_native;
            {
                __retVal_native = __PInvoke();
            }

            // Unmarshal - Convert native data to managed data.
            __retVal = __retVal_native != 0;
            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_symbolicLinksPermitted", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke();
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_mount(string newDir, string mountPoint, bool appendToPath)
        {
            byte* __newDir_native = default;
            byte* __mountPoint_native = default;
            sbyte __appendToPath_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __mountPoint_native__marshaller = new();
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __newDir_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __appendToPath_native = (sbyte)(appendToPath ? 1 : 0);
                __mountPoint_native__marshaller.FromManaged(mountPoint, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                __newDir_native__marshaller.FromManaged(newDir, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __mountPoint_native = __mountPoint_native__marshaller.ToUnmanaged();
                    __newDir_native = __newDir_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__newDir_native, __mountPoint_native, __appendToPath_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __mountPoint_native__marshaller.Free();
                __newDir_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_mount", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(byte* __newDir_native, byte* __mountPoint_native, sbyte __appendToPath_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial string PHYSFS_getMountPoint(string dir)
        {
            bool __invokeSucceeded = default;
            byte* __dir_native = default;
            string __retVal = default;
            byte* __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __dir_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __dir_native__marshaller.FromManaged(dir, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __dir_native = __dir_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__dir_native);
                }

                __invokeSucceeded = true;
                // Unmarshal - Convert native data to managed data.
                __retVal = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshallerSkipFree.ConvertToManaged(__retVal_native);
            }
            finally
            {
                if (__invokeSucceeded)
                {
                    // CleanupCalleeAllocated - Perform cleanup of callee allocated resources.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshallerSkipFree.Free(__retVal_native);
                }

                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __dir_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_getMountPoint", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe byte* __PInvoke(byte* __dir_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_enumerate(string fn, global::Icculus.PhysFS.NET.Internals.PHYSFS_EnumerateCallback cb, nint data)
        {
            byte* __fn_native = default;
            System.IntPtr __cb_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __fn_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __cb_native = cb != null ? global::System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(cb) : default;
                __fn_native__marshaller.FromManaged(fn, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __fn_native = __fn_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__fn_native, __cb_native, data);
                }

                // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
                global::System.GC.KeepAlive(cb);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __fn_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_enumerate", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(byte* __fn_native, System.IntPtr __cb_native, nint __data_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_unmount(string oldDir)
        {
            byte* __oldDir_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __oldDir_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __oldDir_native__marshaller.FromManaged(oldDir, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __oldDir_native = __oldDir_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__oldDir_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __oldDir_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_unmount", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(byte* __oldDir_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_stat(string fname, out global::Icculus.PhysFS.NET.Internals.PHYSFS_Stat stat)
        {
            global::System.Runtime.CompilerServices.Unsafe.SkipInit(out stat);
            byte* __fname_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __fname_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __fname_native__marshaller.FromManaged(fname, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                // Pin - Pin data in preparation for calling the P/Invoke.
                fixed (global::Icculus.PhysFS.NET.Internals.PHYSFS_Stat* __stat_native = &stat)
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __fname_native = __fname_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__fname_native, __stat_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __fname_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_stat", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(byte* __fname_native, global::Icculus.PhysFS.NET.Internals.PHYSFS_Stat* __stat_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial long PHYSFS_readBytes(global::Icculus.PhysFS.NET.Internals.FileHandle handle, nint buffer, ulong _len)
        {
            nint __handle_native = default;
            long __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Icculus.PhysFS.NET.Internals.FileHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__handle_native, buffer, _len);
                }
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __handle_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_readBytes", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe long __PInvoke(nint __handle_native, nint __buffer_native, ulong ___len_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial long PHYSFS_writeBytes(global::Icculus.PhysFS.NET.Internals.FileHandle handle, nint buffer, ulong _len)
        {
            nint __handle_native = default;
            long __retVal = default;
            // Setup - Perform required setup.
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Icculus.PhysFS.NET.Internals.FileHandle>.ManagedToUnmanagedIn __handle_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __handle_native__marshaller.FromManaged(handle);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __handle_native = __handle_native__marshaller.ToUnmanaged();
                    __retVal = __PInvoke(__handle_native, buffer, _len);
                }
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __handle_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_writeBytes", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe long __PInvoke(nint __handle_native, nint __buffer_native, ulong ___len_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_mountMemory(nint buffer, ulong len, global::Icculus.PhysFS.NET.Internals.UnmountCallback del, string newDir, string mountPoint, bool appendToPath)
        {
            System.IntPtr __del_native = default;
            byte* __newDir_native = default;
            byte* __mountPoint_native = default;
            sbyte __appendToPath_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __mountPoint_native__marshaller = new();
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __newDir_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __appendToPath_native = (sbyte)(appendToPath ? 1 : 0);
                __mountPoint_native__marshaller.FromManaged(mountPoint, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                __newDir_native__marshaller.FromManaged(newDir, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                __del_native = del != null ? global::System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(del) : default;
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __mountPoint_native = __mountPoint_native__marshaller.ToUnmanaged();
                    __newDir_native = __newDir_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(buffer, len, __del_native, __newDir_native, __mountPoint_native, __appendToPath_native);
                }

                // NotifyForSuccessfulInvoke - Keep alive any managed objects that need to stay alive across the call.
                global::System.GC.KeepAlive(del);
                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __mountPoint_native__marshaller.Free();
                __newDir_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_mountMemory", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(nint __buffer_native, ulong __len_native, System.IntPtr __del_native, byte* __newDir_native, byte* __mountPoint_native, sbyte __appendToPath_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_mountHandle(global::Icculus.PhysFS.NET.Internals.FileHandle file, string newDir, string mountPoint, bool appendToPath)
        {
            nint __file_native = default;
            byte* __newDir_native = default;
            byte* __mountPoint_native = default;
            sbyte __appendToPath_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __mountPoint_native__marshaller = new();
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __newDir_native__marshaller = new();
            global::System.Runtime.InteropServices.Marshalling.SafeHandleMarshaller<global::Icculus.PhysFS.NET.Internals.FileHandle>.ManagedToUnmanagedIn __file_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __appendToPath_native = (sbyte)(appendToPath ? 1 : 0);
                __mountPoint_native__marshaller.FromManaged(mountPoint, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                __newDir_native__marshaller.FromManaged(newDir, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                __file_native__marshaller.FromManaged(file);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __mountPoint_native = __mountPoint_native__marshaller.ToUnmanaged();
                    __newDir_native = __newDir_native__marshaller.ToUnmanaged();
                    __file_native = __file_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__file_native, __newDir_native, __mountPoint_native, __appendToPath_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __mountPoint_native__marshaller.Free();
                __newDir_native__marshaller.Free();
                __file_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_mountHandle", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(nint __file_native, byte* __newDir_native, byte* __mountPoint_native, sbyte __appendToPath_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_getLastErrorCode", ExactSpelling = true)]
        public static extern partial global::Icculus.PhysFS.NET.Internals.PHYSFS_ErrorCode PHYSFS_getLastErrorCode();
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial string PHYSFS_getErrorByCode(global::Icculus.PhysFS.NET.Internals.PHYSFS_ErrorCode code)
        {
            bool __invokeSucceeded = default;
            string __retVal = default;
            byte* __retVal_native = default;
            try
            {
                {
                    __retVal_native = __PInvoke(code);
                }

                __invokeSucceeded = true;
                // Unmarshal - Convert native data to managed data.
                __retVal = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshallerSkipFree.ConvertToManaged(__retVal_native);
            }
            finally
            {
                if (__invokeSucceeded)
                {
                    // CleanupCalleeAllocated - Perform cleanup of callee allocated resources.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshallerSkipFree.Free(__retVal_native);
                }
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_getErrorByCode", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe byte* __PInvoke(global::Icculus.PhysFS.NET.Internals.PHYSFS_ErrorCode __code_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_setErrorCode", ExactSpelling = true)]
        public static extern partial void PHYSFS_setErrorCode(global::Icculus.PhysFS.NET.Internals.PHYSFS_ErrorCode code);
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial string PHYSFS_getPrefDir(string org, string app)
        {
            bool __invokeSucceeded = default;
            byte* __org_native = default;
            byte* __app_native = default;
            string __retVal = default;
            byte* __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __app_native__marshaller = new();
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __org_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __app_native__marshaller.FromManaged(app, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                __org_native__marshaller.FromManaged(org, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __app_native = __app_native__marshaller.ToUnmanaged();
                    __org_native = __org_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__org_native, __app_native);
                }

                __invokeSucceeded = true;
                // Unmarshal - Convert native data to managed data.
                __retVal = global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshallerSkipFree.ConvertToManaged(__retVal_native);
            }
            finally
            {
                if (__invokeSucceeded)
                {
                    // CleanupCalleeAllocated - Perform cleanup of callee allocated resources.
                    global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshallerSkipFree.Free(__retVal_native);
                }

                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __app_native__marshaller.Free();
                __org_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_getPrefDir", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe byte* __PInvoke(byte* __org_native, byte* __app_native);
        }
    }
}
namespace Icculus.PhysFS.NET.Internals
{
    public static unsafe partial class physfs
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Interop.LibraryImportGenerator", "8.0.12.6609")]
        [global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]
        public static partial bool PHYSFS_setRoot(string archive, string subdir)
        {
            byte* __archive_native = default;
            byte* __subdir_native = default;
            bool __retVal = default;
            sbyte __retVal_native = default;
            // Setup - Perform required setup.
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __subdir_native__marshaller = new();
            scoped global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn __archive_native__marshaller = new();
            try
            {
                // Marshal - Convert managed data to native data.
                __subdir_native__marshaller.FromManaged(subdir, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                __archive_native__marshaller.FromManaged(archive, stackalloc byte[global::System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize]);
                {
                    // PinnedMarshal - Convert managed data to native data that requires the managed data to be pinned.
                    __subdir_native = __subdir_native__marshaller.ToUnmanaged();
                    __archive_native = __archive_native__marshaller.ToUnmanaged();
                    __retVal_native = __PInvoke(__archive_native, __subdir_native);
                }

                // Unmarshal - Convert native data to managed data.
                __retVal = __retVal_native != 0;
            }
            finally
            {
                // CleanupCallerAllocated - Perform cleanup of caller allocated resources.
                __subdir_native__marshaller.Free();
                __archive_native__marshaller.Free();
            }

            return __retVal;
            // Local P/Invoke
            [global::System.Runtime.InteropServices.DllImportAttribute("physfs.dll", EntryPoint = "PHYSFS_setRoot", ExactSpelling = true)]
            [global::System.Runtime.InteropServices.UnmanagedCallConvAttribute(CallConvs = new global::System.Type[] { typeof(global::System.Runtime.CompilerServices.CallConvStdcall) })]
            static extern unsafe sbyte __PInvoke(byte* __archive_native, byte* __subdir_native);
        }
    }
}
